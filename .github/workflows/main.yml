name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  PROJECT_NAME: bems-test
  IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}
  NCP_REGISTRY: ${{ secrets.NCP_REGISTRY }}
  NCP_USERNAME: ${{ secrets.NCP_USERNAME }}
  NCP_PASSWORD: ${{ secrets.NCP_PASSWORD }}

jobs:

  build:
    name: üî® Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build without tests
        run: ./gradlew clean bootJar -x test
      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: build/libs/

  test:
    name: üß™ Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Run Tests
        run: ./gradlew test
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/

  security-scan:
    name: üîç Security Scan (Trivy)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
        continue-on-error: true

  dockerize:
    name: üê≥ Dockerize & Push
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Download built jar
        uses: actions/download-artifact@v4
        with:
          name: jar
          path: build/libs/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to NCP Container Registry
        run: echo "${{ secrets.NCP_PASSWORD }}" | docker login -u "${{ secrets.NCP_USERNAME }}" --password-stdin "${{ secrets.NCP_REGISTRY }}"
        
      - name: Build and Tag Docker image
        run: |
          docker build -t $PROJECT_NAME:$IMAGE_TAG .
          docker tag $PROJECT_NAME:$IMAGE_TAG $NCP_REGISTRY/$PROJECT_NAME:$IMAGE_TAG

          # Ï∂îÍ∞Ä: Î≤ÑÏ†Ñ ÌÉúÍ∑∏Í∞Ä ÏûàÎäî Í≤ΩÏö∞ latestÎèÑ Í∞ôÏù¥ ÌÉúÍ∑∏
          if [[ "$IMAGE_TAG" != "latest" ]]; then
            docker tag $PROJECT_NAME:$IMAGE_TAG $PROJECT_NAME:latest
            docker tag $PROJECT_NAME:$IMAGE_TAG $NCP_REGISTRY/$PROJECT_NAME:latest
          fi

      - name: Push Docker image
        run: |
          docker push $NCP_REGISTRY/$PROJECT_NAME:$IMAGE_TAG
          if [[ "$IMAGE_TAG" != "latest" ]]; then
            docker push $NCP_REGISTRY/$PROJECT_NAME:latest
          fi

      - name: Logout
        run: docker logout $NCP_REGISTRY
